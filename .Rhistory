select(control, switch)
view(relevant_tidy_data)
view(tidy_data)
filter(Finished == T) |>
filter(already_familiar == F) |>
filter(already_knew_answer == F) |>
filter(own_answer == T) |>
select("Prolific ID question", control, switch)
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
filter(Finished == T) |>
filter(already_familiar == F) |>
filter(already_knew_answer == F) |>
filter(own_answer == T) |>
select("Prolific ID question", control, switch)
relevant_tidy_data = tidy_data |>
filter("Duration (in seconds) >= 60") |>
filter(Finished == T) |>
filter(already_familiar == F) |>
filter(already_knew_answer == F) |>
filter(own_answer == T) |>
select("Prolific ID question", control, switch)
relevant_tidy_data = tidy_data |>
filter("Duration (in seconds)" >= 60) |>
filter(Finished == T) |>
filter(already_familiar == F) |>
filter(already_knew_answer == F) |>
filter(own_answer == T) |>
select("Prolific ID question", control, switch)
view(relevant_tidy_data)
relevant_tidy_data = relevant_tidy_data |>
mutate(correct_justification)
view(relevant_tidy_data)
relevant_tidy_data = relevant_tidy_data |>
mutate(correct_justification = empty())
relevant_tidy_data = relevant_tidy_data |>
mutate(correct_justification = "")
view(relevant_tidy_data)
write.csv(relevant_tidy_data, "./data/pilotB_coded.csv")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
relevant_tidy_data = relevant_tidy_data |>
mutate(correct_justification = "")
view(relevant_tidy_data)
write.csv(relevant_tidy_data, "./data/pilotB_coded.csv")
write.csv(relevant_tidy_data, "data/pilotB_coded.csv")
write.csv(relevant_tidy_data, "/data/pilotB_coded.csv")
write.csv(relevant_tidy_data, "./data/pilotB_coded.csv")
write.csv(relevant_tidy_data, "./data/pilotB_coded.csv")
write.csv(relevant_tidy_data, "pilotB_coded.csv")
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
relevant_tidy_data <- read_csv("./data/pilotB_coded.csv")
relevant_tidy_data <- read_csv("./.../data/pilotB_coded.csv")
setwd("/Users/bendix/Desktop/krauss2003_rescue")
# Set working directory
getwd()
relevant_tidy_data <- read_csv("./data/pilotB_coded.csv")
relevant_tidy_data <- read_csv("../data/pilotB_coded.csv")
table <- with(
relevant_tidy_data,
table(correct_justification, control))
table
proportions = data.frame(Condition=c("Control","Experimental"),
Proportion=c((table[2, 2]/
(table[2, 2] + table[1, 2])), # the first proportion is that of correct justifications given in control condition
(table[2,1]/
(table[2, 1] + table[1, 1])))) # the second proportion is that of correct justifications given in experimental condition
relevant_tidy_data <- read_csv("../data/pilotB_coded.csv")
table <- with(
relevant_tidy_data,
table(correct_justification, control))
table
proportions = data.frame(Condition=c("Control","Experimental"),
Proportion=c((table[2, 2]/
(table[2, 2] + table[1, 2])), # the first proportion is that of correct justifications given in control condition
(table[2,1]/
(table[2, 1] + table[1, 1])))) # the second proportion is that of correct justifications given in experimental condition
proportions
library("pwr")
h <- ES.h(
proportions$Proportion[1], # the first proportion is that of correct justifications given in control condition
proportions$Proportion[2] # the second proportion is that of correct justifications given in experimental condition
)
h
fisher_exact_test <- fisher.test(as.matrix(table))
fisher_exact_test
library(ggplot2)
plot <- ggplot(data=proportions, aes(x=Condition, y=(Proportion)*100)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=c("Control", "Experimental"),
labels=c("Control", "Experimental")) + ylim(0, 100) +
labs(title = "Pilot A results", x = "Condition", y = "Percentage correct (%)")
plot
plot <- ggplot(data=proportions, aes(x=Condition, y=(Proportion)*100)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=c("Control", "Experimental"),
labels=c("Control", "Experimental")) + ylim(0, 100) +
labs(title = "Pilot B results", x = "Condition", y = "Percentage correct (%)")
plot
proportions_original_study = data.frame(Condition=c("Control","Experimental"),
Proportion=c(.3, .38))
plot_original_study <- ggplot(data=proportions_original_study, aes(x=Condition, y=(Proportion)*100)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=c("Control","Experimental"),
labels=c("Control", "Experimental")) + ylim(0, 100) +
labs(title = "Original study results", x = "Condition", y = "Percentage correct (%)")
plot_original_study
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("./data/pilotB.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("../data/pilotB.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("./data/pilotB.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("./data/pilotB.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("../data/pilotB.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("./data/pilotB.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_csv("./data/pilotB.csv")
### tidy data
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("./data/pilotBdata_notanyonymized")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
getwd()
setwd("/Users/bendix/Desktop/krauss2003_rescue")
### load data from Pilot B
data <- read_survey("./data/pilotBdata_notanyonymized.csv")
### anonymize and tidy data
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
# Export anyonymized, tidy data
write.csv(tidy_data, "../data/pilotB_tidy.csv")
# Export anyonymized, tidy data
write.csv(tidy_data, "./data/pilotB_tidy.csv")
# Export anyonymized, tidy data
write.csv(tidy_data, "../data/pilotB_tidy.csv")
relevant_tidy_data = tidy_data |>
filter("Duration (in seconds)" >= 60) |>
filter(Finished == T) |>
filter(already_familiar == F) |>
filter(already_knew_answer == F) |>
filter(own_answer == T) |>
select("Prolific ID question", control, switch)
relevant_tidy_data = relevant_tidy_data |>
mutate(correct_justification = "")
write.csv(relevant_tidy_data, "../data/pilotB_to_be_coded.csv")
# after coding answers, load file
relevant_tidy_data <- read_csv("../data/pilotB_coded.csv")
# generate contingency table that displays how many participants in the control and experimental condition provided a correct justification
table <- with(
relevant_tidy_data,
table(correct_justification, control))
table
proportions = data.frame(Condition=c("Control","Experimental"),
Proportion=c((table[2, 2]/
(table[2, 2] + table[1, 2])), # the first proportion is that of correct justifications given in control condition
(table[2,1]/
(table[2, 1] + table[1, 1])))) # the second proportion is that of correct justifications given in experimental condition
proportions
# perform Cohen's h test
library("pwr")
h <- ES.h(
proportions$Proportion[1], # the first proportion is that of correct justifications given in control condition
proportions$Proportion[2] # the second proportion is that of correct justifications given in experimental condition
)
h
# perform Fisher's exact test
fisher_exact_test <- fisher.test(as.matrix(table))
fisher_exact_test
# Plots of results
library(ggplot2)
# Plot from replication study
plot <- ggplot(data=proportions, aes(x=Condition, y=(Proportion)*100)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=c("Control", "Experimental"),
labels=c("Control", "Experimental")) + ylim(0, 100) +
labs(title = "Pilot B results", x = "Condition", y = "Percentage correct (%)")
plot
# Plot from the original study
proportions_original_study = data.frame(Condition=c("Control","Experimental"),
Proportion=c(.3, .38))
plot_original_study <- ggplot(data=proportions_original_study, aes(x=Condition, y=(Proportion)*100)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=c("Control","Experimental"),
labels=c("Control", "Experimental")) + ylim(0, 100) +
labs(title = "Original study results", x = "Condition", y = "Percentage correct (%)")
plot_original_study
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
setwd("/Users/bendix/Desktop/krauss2003_rescue")
getwd()
### load data from Pilot B
data <- read_survey("./data/pilotBdata_notanyonymized.csv")
### anonymize and tidy data
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
# Export anyonymized, tidy data
write.csv(tidy_data, "../data/pilotB_tidy.csv")
# Export anyonymized, tidy data
write.csv(tidy_data, "../data/pilotB_tidy.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
setwd("/Users/bendix/Desktop/krauss2003_rescue")
getwd()
### load data from Pilot B
data <- read_survey("./data/pilotBdata_notanyonymized.csv")
### anonymize and tidy data
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
# Export anyonymized, tidy data
write.csv(tidy_data, "../data/pilotB_tidy.csv")
# Export anyonymized, tidy data
write.csv(tidy_data, "../data/pilotB_tidy.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
setwd("/Users/bendix/Desktop/krauss2003_rescue")
getwd()
### load data from Pilot B
data <- read_survey("./data/pilotBdata_notanyonymized.csv")
### anonymize and tidy data
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
# keep only rows corresponding to participants who finished the survey, took more than 60 seconds, weren't familiar with the scenario, and completed the questionnaire on their own
relevant_tidy_data = tidy_data |>
filter("Duration (in seconds)" >= 60) |>
filter(Finished == T) |>
filter(already_familiar == F) |>
filter(already_knew_answer == F) |>
filter(own_answer == T) |>
select("Prolific ID question", control, switch)
# create a new column to record which participants provided correct justifications
relevant_tidy_data = relevant_tidy_data |>
mutate(correct_justification = "")
# export relevant_tidy_data to csv for coding
write.csv(relevant_tidy_data, "../data/pilotB_to_be_coded.csv")
write.csv(relevant_tidy_data, "../data/pilotB_to_be_coded.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
setwd("/Users/bendix/Desktop/krauss2003_rescue")
getwd()
### load data from Pilot B
data <- read_survey("./data/pilotBdata_notanyonymized.csv")
### anonymize and tidy data
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
# Export anonymized, tidy data
write.csv(tidy_data, "../data/pilotB_tidy.csv")
### load packages
library("tidyverse")
library("qualtRics")
library("plyr")
library("dplyr")
# Set working directory
setwd("/Users/bendix/Desktop/krauss2003_rescue")
getwd()
### load data from Pilot B
data <- read_survey("./data/pilotBdata_notanyonymized.csv")
### anonymize and tidy data
tidy_data = data |>
select("Prolific ID question", Finished, "Duration (in seconds)", Q7, Q9, Q10, Q20, Q14, Q15, Q43) |>
unite(switch, c(Q10, Q20), na.rm = T) |>
mutate(switch = case_when(switch == 'switch to door 2' | switch == 'switch to the last remaining door' ~ TRUE,
TRUE ~ FALSE)) |>
dplyr::rename(wins_cases_if_stays = Q7, wins_cases_if_switches = Q9, already_familiar = Q14, already_knew_answer = Q15, own_answer = Q43) |>
mutate(already_familiar = case_when(already_familiar == 'I was familiar with this game' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(already_knew_answer = case_when(already_knew_answer == 'I already knew what the correct answer should be' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(own_answer = case_when(own_answer == 'I arrived at the answer on my own' ~ TRUE,
TRUE ~ FALSE)) |>
mutate(control = case_when(is.na(wins_cases_if_stays) ~ TRUE,
TRUE ~ FALSE))
# Export anonymized, tidy data
# write.csv(tidy_data, "../data/pilotB_tidy.csv")
# keep only rows corresponding to participants who finished the survey, took more than 60 seconds, weren't familiar with the scenario, and completed the questionnaire on their own
relevant_tidy_data = tidy_data |>
filter("Duration (in seconds)" >= 60) |>
filter(Finished == T) |>
filter(already_familiar == F) |>
filter(already_knew_answer == F) |>
filter(own_answer == T) |>
select("Prolific ID question", control, switch)
# create a new column to record which participants provided correct justifications
relevant_tidy_data = relevant_tidy_data |>
mutate(correct_justification = "")
# export relevant_tidy_data to csv for coding
# write.csv(relevant_tidy_data, "../data/pilotB_to_be_coded.csv")
# after coding answers, load file
relevant_tidy_data <- read_csv("../data/pilotB_coded.csv")
# generate contingency table that displays how many participants in the control and experimental condition provided a correct justification
table <- with(
relevant_tidy_data,
table(correct_justification, control))
table
proportions = data.frame(Condition=c("Control","Experimental"),
Proportion=c((table[2, 2]/
(table[2, 2] + table[1, 2])), # the first proportion is that of correct justifications given in control condition
(table[2,1]/
(table[2, 1] + table[1, 1])))) # the second proportion is that of correct justifications given in experimental condition
proportions
# perform Cohen's h test
library("pwr")
h <- ES.h(
proportions$Proportion[1], # the first proportion is that of correct justifications given in control condition
proportions$Proportion[2] # the second proportion is that of correct justifications given in experimental condition
)
h
# perform Fisher's exact test
fisher_exact_test <- fisher.test(as.matrix(table))
fisher_exact_test
# Plots of results
library(ggplot2)
# Plot from replication study
plot <- ggplot(data=proportions, aes(x=Condition, y=(Proportion)*100)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=c("Control", "Experimental"),
labels=c("Control", "Experimental")) + ylim(0, 100) +
labs(title = "Pilot B results", x = "Condition", y = "Percentage correct (%)")
plot
# Plot from the original study
proportions_original_study = data.frame(Condition=c("Control","Experimental"),
Proportion=c(.3, .38))
plot_original_study <- ggplot(data=proportions_original_study, aes(x=Condition, y=(Proportion)*100)) +
geom_bar(stat="identity") +
scale_x_discrete(breaks=c("Control","Experimental"),
labels=c("Control", "Experimental")) + ylim(0, 100) +
labs(title = "Original study results", x = "Condition", y = "Percentage correct (%)")
plot_original_study
